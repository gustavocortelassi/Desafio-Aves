# Projeto POO - Simula√ß√£o de Aves (TypeScript)

Este projeto demonstra a aplica√ß√£o de princ√≠pios de Programa√ß√£o Orientada a Objetos (POO) e Test Driven Development (TDD) utilizando TypeScript e Jest. O objetivo √© modelar diferentes tipos de aves e seus comportamentos de forma flex√≠vel e extens√≠vel, seguindo o padr√£o de projeto Strategy.

## ü¶Ü Estrutura do Projeto

- **src/**: C√≥digo-fonte principal
  - Classes de aves e brinquedos
  - Implementa√ß√µes dos comportamentos de voo, nado e som
  - Interfaces para os comportamentos
  - Arquivos de teste para cada classe
- **diagrama.puml**: Diagrama UML do projeto
- **jest.config.js**: Configura√ß√£o de testes
- **package.json**: Depend√™ncias e scripts

## üöÄ Como Executar o Projeto

Voc√™ precisar√° ter o [Node.js](https://nodejs.org/) (que inclui o `npm`) instalado.

### 1. Instalar as Depend√™ncias

Clone o reposit√≥rio, abra o terminal na pasta do projeto e execute:

```bash
npm install
```

### 2. Executar os Testes

```bash
npm test
```

## üß© Principais Conceitos Demonstrados

- **Composi√ß√£o de comportamentos**: Cada ave/brinquedo recebe comportamentos de voo, nado e som via composi√ß√£o, permitindo f√°cil troca e extens√£o.
- **Interfaces e Implementa√ß√µes**: Os comportamentos s√£o definidos por interfaces e implementados em classes separadas.
- **Testes automatizados**: Cada classe possui testes unit√°rios para garantir o funcionamento correto.

## üìÑ Exemplos de Uso

```typescript
import { PatoSelvagem } from './src/PatoSelvagem';

const pato = new PatoSelvagem();
console.log(pato.executarVoo()); // "Estou voando com asas!"
console.log(pato.executarNado()); // "Estou nadando com patas!"
console.log(pato.executarSom()); // "Quack!"
```

## üìö Diagrama UML

Veja o arquivo `diagrama.puml` para o diagrama completo das rela√ß√µes entre classes e interfaces.

---

Sinta-se √† vontade para explorar, modificar e expandir os comportamentos das aves!